{
  "title": "RESTful Api",
  "cells": [
    {
      "type": "text",
      "data": "<a href=\"https://www.zhihu.com/question/28557115\">https://www.zhihu.com/question/28557115</a>"
    },
    {
      "type": "text",
      "data": "<div>著作权归作者所有。<br>商业转载请联系作者获得授权，非商业转载请注明出处。<br>作者：覃超<br>链接：https://www.zhihu.com/question/28557115/answer/48094438<br>来源：知乎<br><br><div class=\"zm-editable-content clearfix\">我觉得问题很好：REST -- REpresentational State Transfer 直接翻译：表现层状态转移。这个中文直译经常出现在很多博客中。尼玛谁听得懂“表现层状态转移”？这是人话吗？我自己也困惑了很久，查询了很多资料，花了差不多一年有个还算清晰的理解。分享如下：<br><br><a data-hash=\"6ef2e77274cb0719253a577665cf690e\" href=\"//www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e\" class=\"member_mention\" data-editable=\"true\" data-title=\"@Ivony\" data-tip=\"p$t$6ef2e77274cb0719253a577665cf690e\">@Ivony</a> 老师的一句话概括很精辟：<br><b>URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。<br></b><br><b>--- 简洁版 ---</b><br><br>0. REST不是\"rest\"这个单词，而是几个单词缩写。但即使那几个单词说出来，也无法理解在说什么 -_-!! （不是要贬低人，是我自己也理解困难）；<br>1. REST描述的是在网络中client和server的一种交互形式；REST本身不实用，实用的是如何设计 RESTful API（REST风格的网络接口）；<br>2. Server提供的RESTful API中，URL中只使用名词来指定资源，原则上不使用动词。“资源”是REST架构或者说整个网络处理的核心。比如：<br><a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/newsfeed\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">api.qc.com/v1/newsfeed</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>: 获取某人的新鲜; <br><a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">api.qc.com/v1/friends</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>: 获取某人的好友列表;<br><a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">api.qc.com/v1/profile</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>: 获取某人的详细信息;3. 用HTTP协议里的动词来实现资源的添加，修改，删除等操作。即通过HTTP动词来实现资源的状态扭转：<br>GET    用来获取资源，<br>POST  用来新建资源（也可以用于更新资源），<br>PUT    用来更新资源，<br>DELETE  用来删除资源。比如：<br>DELETE <a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://api.qc.com/v1/<i class=\"icon-external\"></i></a>friends: 删除某人的好友 （在http parameter指定好友id）<br>POST <a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">http://api.qc.com/v1/<i class=\"icon-external\"></i></a>friends: 添加好友<br>UPDATE <a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">api.qc.com/v1/profile</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>: 更新个人资料<br><br>禁止使用： GET <a href=\"//link.zhihu.com/?target=http%3A//api.qc.com/v1/deleteFriend\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">api.qc.com/v1/deleteFri</span><span class=\"invisible\">end</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 图例：<br><noscript>&amp;lt;img src=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_b.jpg\" data-rawwidth=\"1328\" data-rawheight=\"702\" class=\"origin_image zh-lightbox-thumb\" width=\"1328\" data-original=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg\"&amp;gt;</noscript><img src=\"quiver-image-url/FC8A8FDC459F16EFE13D7632020FDADC.png\" data-rawwidth=\"1328\" data-rawheight=\"702\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1328\" data-original=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg\" data-actualsrc=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_b.jpg\" style=\"width: 584px; height: 308.710843373494px; display: block;\"><br>4. Server和Client之间传递某资源的一个表现形式，比如用JSON，XML传输文本，或者用JPG，WebP传输图片等。当然还可以压缩HTTP传输时的数据（on-wire data compression）。<br>5. 用 HTTP Status Code传递Server的状态信息。比如最常用的 200 表示成功，500 表示Server内部错误等。<br><br>主要信息就这么点。最后是要解放思想，Web端不再用之前典型的PHP或JSP架构，而是改为前段渲染和附带处理简单的商务逻辑（比如AngularJS或者BackBone的一些样例）。Web端和Server只使用上述定义的API来传递数据和改变数据状态。格式一般是JSON。iOS和Android同理可得。由此可见，Web，iOS，Android和第三方开发者变为平等的角色通过一套API来共同消费Server提供的服务。<br><br><br><b>--- 详细版 ---</b><br><br><b>先说REST名称</b><br>REST -- REpresentational State Transfer<br>首先，之所以晦涩是因为前面主语被去掉了，全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：<br>Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；<br>Representational：某种表现形式，比如用JSON，XML，JPEG等；<br>State Transfer：状态变化。通过HTTP动词实现。<br><b>REST的出处</b><br>Roy Fielding的毕业论文。这哥们参与设计HTTP协议，也是Apache Web Server项目（可惜现在已经是 nginx 的天下）的co-founder。PhD的毕业学校是 UC Irvine，Irvine在加州，有着充裕的阳光和美丽的海滩，是著名的富人区。Oculus VR 的总部就坐落于此（虚拟现实眼镜，被FB收购，CTO为Quake和Doom的作者 John Carmack）。<br>众说周知，论文都是晦涩难懂的。当年在CMU读书的时候，很多课程都会安排每周两篇的Paper review。现在回想起来每次写Paper review都是我最为痛苦的时候。REST这篇博士论文毫无疑问更甚。<br>论文地址：<a href=\"//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Architectural Styles and the Design of Network-based Software Architectures<i class=\"icon-external\"></i></a><br>REST章节：<a href=\"//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)<i class=\"icon-external\"></i></a><br>REST那章我初读了，整个论文没有读完 =_=<br><noscript>&amp;lt;img src=\"https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_b.jpg\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_r.jpg\"&amp;gt;</noscript><img src=\"quiver-image-url/5CE8207EBAEFA29B0C9AC044E5B53460.jpg\" data-rawwidth=\"500\" data-rawheight=\"375\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"500\" data-original=\"https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_r.jpg\" data-actualsrc=\"https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_b.jpg\" style=\"width: 500px; height: 375px; display: block;\"><br><b>RESTful API</b><br>实用的是如何正确地理解 RESTful架构和设计好RESTful API。<br><br><b>首先为什么要用RESTful结构呢？</b><br>大家都知道\"古代\"网页是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。在RESTful架构下：<br><noscript>&amp;lt;img src=\"https://pic2.zhimg.com/06ee404783540f0af299042057738a99_b.jpg\" data-rawwidth=\"550\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic2.zhimg.com/06ee404783540f0af299042057738a99_r.jpg\"&amp;gt;</noscript><img src=\"quiver-image-url/3F9C0C8A3581FCDEEE3406E902C942F0.jpg\" data-rawwidth=\"550\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"550\" data-original=\"https://pic2.zhimg.com/06ee404783540f0af299042057738a99_r.jpg\" data-actualsrc=\"https://pic2.zhimg.com/06ee404783540f0af299042057738a99_b.jpg\" style=\"width: 550px; height: 250px; display: block;\"><br><b>Server的API如何设计才满足RESTful要求?</b><br>首先是简洁版里面的那几点。外加一些附带的 best practices：<br>1. URL root:<br><a href=\"//link.zhihu.com/?target=https%3A//example.org/api/v1/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">example.org/api/v1/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>*<br><a href=\"//link.zhihu.com/?target=https%3A//api.example.com/v1/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">api.example.com/v1/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>*2. API versioning:<br>可以放在URL里面，也可以用HTTP的header：<br>/api/v1/<br>3. URI使用名词而不是动词，且推荐用复数。<br>BAD<br><ul><li>/getProducts</li><li>/listOrders</li><li>/retrieveClientByOrder?orderId=1</li></ul>GOOD<br><ul><li>GET /products : will return the list of all products</li><li>POST /products : will add a product to the collection</li><li>GET /products/4 : will retrieve product #4</li><li>PATCH/PUT /products/4 : will update product #4</li></ul>4. 保证  HEAD 和 GET 方法是安全的，不会对资源状态有所改变（污染）。比如严格杜绝如下情况：<br>GET /deleteProduct?id=1<br>5. 资源的地址推荐用嵌套结构。比如：<br>GET /friends/10375923/profile<br>UPDATE /profile/primaryAddress/city6. 警惕返回结果的大小。如果过大，及时进行分页（pagination）或者加入限制（limit）。HTTP协议支持分页（Pagination）操作，在Header中使用 Link 即可。<br>7. 使用正确的HTTP Status Code表示访问状态：<a href=\"//link.zhihu.com/?target=http%3A//www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HTTP/1.1: Status Code Definitions<i class=\"icon-external\"></i></a><br>8. 在返回结果用明确易懂的文本（String。注意返回的错误是要给人看的，避免用 1001 这种错误信息），而且适当地加入注释。<br>9. 关于安全：自己的接口就用https，加上一个key做一次hash放在最后即可。考虑到国情，HTTPS在无线网络里不稳定，可以使用Application Level的加密手段把整个HTTP的payload加密。有兴趣的朋友可以用手机连上电脑的共享Wi-Fi，然后用Charles监听微信的网络请求（发照片或者刷朋友圈）。<br>如果是平台的API，可以用成熟但是复杂的OAuth2，新浪微博这篇：<a href=\"//link.zhihu.com/?target=http%3A//open.weibo.com/wiki/%25E6%258E%2588%25E6%259D%2583%25E6%259C%25BA%25E5%2588%25B6%25E8%25AF%25B4%25E6%2598%258E\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">授权机制说明<i class=\"icon-external\"></i></a><br><br><b>各端的具体实现</b><br>如上面的图所示，Server统一提供一套RESTful API，web+ios+android作为同等公民调用API。各端发展到现在，都有一套比较成熟的框架来帮开发者事半功倍</div></div>"
    }
  ]
}