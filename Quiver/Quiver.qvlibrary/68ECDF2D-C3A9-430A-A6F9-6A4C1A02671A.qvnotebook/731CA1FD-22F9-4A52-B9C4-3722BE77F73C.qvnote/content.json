{
  "title": "Node.js",
  "cells": [
    {
      "type": "code",
      "language": "javascript",
      "data": "1. What is call back?\n    A \"callback\" is any function that is called by another function which takes the first function as a parameter.\n    function learn(something) {\n    \tconsole.log(something);\n    }\n\n    function we(callback, something) {\n    \tsomething += ' is cool'\n    \tcallback(something)\n    }\n\n    we(learn, 'Nodejs')\n    we(function(something) {\n    \tconsole.log(something)\n    }, 'jade')\n    \n2. What is Synchronize and Asynchronous?\n    Synchronous execution means the execution happens in a single series.  A->B->C->D. If you are calling those routines, A will run, then finish, then B will start, then finish, then C will start, etc.\n\n    With Asynchronous execution, you begin a routine, and let it run in the background while you start your next, then at some point, say \"wait for this to finish\". It's more like:\nStart A->B->C->D->Wait for A to finish\n\n    The advantage is that you can execute B, C, and or D while A is still running (in the background, on a separate thread), so you can take better advantage of your resources and have fewer \"hangs\" or \"waits\".\n    2.1 Synchronization:\n        var c = 0;\n        function printIt () {\n        \tconsole.log(c);\n        }\n        \n        function plus() {\n        \tc += 1;\n        }\n        printIt();\n        plus();//c == 0\n    2.2 Asynchronous\n        var c = 0;\n        function printIt () {\n        \tconsole.log(c);\n        }\n        \n        function plus(callback) {\n        \tsetTimeout(function() {\n        \t\tc += 1;\n        \t\tcallback();\n        \t}, 1000)\n        }\n        plus(printIt);//c == 1\n        \nWhat is I/0\nWhat is single thread/ mutiple thread\nWhat is blocking and non-blocking   \nWhat is event\n\n\nWhat is event driven\n    function clickIt(e) {\n    \twindow.alert('Button is clicked')\n    }\n    var button = document.getElementById('button')\n    button.addEventListener('click', clickIt)\n\n//我们为了某个事件注册了回调函数，但是回调函数不会马上执行，只有事件发生的时候才会调用回调函数，这种执行的方式就叫做事件驱动的回调event driven\n\n//EventEmitter\nWhat is callback which base on the event driven\n\nWhat is event loop?\n    This is a callback function queue, when the callback function execute, it will be pushed to the queue.FIFO queue\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    }
  ]
}