{
  "title": "学习经验（2)",
  "cells": [
    {
      "type": "text",
      "data": "<table cellspacing=\"0\" cellpadding=\"0\" style=\"word-wrap: break-word; empty-cells: show; table-layout: fixed; width: 990px; color: rgb(85, 85, 85); font-family: Tahoma, 'Microsoft Yahei', STXihei, Simsun; font-size: 12px;\"><tbody style=\"word-wrap: break-word;\"><tr style=\"word-wrap: break-word;\"><td class=\"t_f\" id=\"postmessage_2219458\" style=\"word-wrap: break-word; font-size: 14px;\"><span class=\"pstatus\" style=\"word-wrap: break-word; display: block; margin-bottom: -30px; font-size: 12px; text-align: center; line-height: 32px; color: rgb(153, 153, 153);\">本帖最后由 puncsky 于 2016-2-15 07:06 编辑&nbsp;</span><br style=\"word-wrap: break-word;\"><br style=\"word-wrap: break-word;\">这些年一直少有机会回馈社区，因为自己实在太(tai)忙(lan)。而且其间还错过了地主大人和他的朋友们共襄盛举的机会&nbsp;<a href=\"http://instant.1point3acres.com/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">http://instant.1point3acres.com/</a>&nbsp;，悔不当初啊～<br style=\"word-wrap: break-word;\"><br style=\"word-wrap: break-word;\">先介绍一下自己的背景：Yale MSCS -&gt; Microsoft -&gt; Oracle -&gt; Uber ，虽然自己被面试只有个位数的次数，面试别人也仅仅只有几十人，但是还是花了一些功夫研究系统设计的面试。跟朋友们讨论自己的一些心得，反馈效果很不错，所以总结出一篇文章，放到这里，希望对大家有帮助！<img src=\"quiver-image-url/D2D24CA195E8F03476F4CDCE203C7E53.gif\" smilieid=\"112\" border=\"0\" alt=\"\" style=\"word-wrap: break-word;\"><br style=\"word-wrap: break-word;\"><br style=\"word-wrap: break-word;\">原文转载自我的博客&nbsp;<a href=\"http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Puncsky CS Notebook</a><br style=\"word-wrap: break-word;\"><br style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.puncsky.com/blog/2016/02/14/crack-the-system-design-interview/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Crack the System Design Interview</a></font></span><div align=\"left\" style=\"word-wrap: break-word;\">Feb 14th, 2016&nbsp;</div><font color=\"#333333\" style=\"word-wrap: break-word;\"><div align=\"left\" style=\"word-wrap: break-word;\">Building applications is not a hard thing, but having the vision of the overall architecture really makes a difference. We have to crack the sy<a href=\"http://www.1point3acres.com/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%9C%9F%E5%AE%89%E5%85%A8%E9%83%A82012%E5%B9%B4%E5%BA%A6%E6%9B%B4%E6%96%B0stem%E4%B8%93%E4%B8%9A%E5%90%8D%E5%8D%95-%E7%9C%8B%E7%9C%8B%E4%BD%A0%E7%9A%84%E4%B8%93%E4%B8%9A/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">stem</a>&nbsp;interview sooner or later in our career as a software engineer or engineering manager.</div><div align=\"left\" style=\"word-wrap: break-word;\">Interviewers are looking for future teammates that they like to work with. The future teammates are expected to be, at least, capable of solving problems independently. There are so many solutions to any given problem, but not all of them are suited given the context. So the interviewee has to specify different choices and their tradeoffs. To summarize,&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">system design interview is a happy show-off of our knowledge on technologies and their tradeoffs. Ideally, keep talking what the interviewer expect throughout the interview, before they even have to ask.</span></div><div align=\"left\" style=\"word-wrap: break-word;\">Keep talking for 45 mins could be easy, as long as we are armed with the following&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">four steps and three common topics</span>. Take<span style=\"word-wrap: break-word; font-weight: 700;\">“design Pinterest”</span>&nbsp;for example.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1. Four steps to Crack the System Design Interview</span><div align=\"left\" style=\"word-wrap: break-word;\">Breaking down a complex task into small chunks helps us handle the problem at a better pace and in a more actionable way.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.1 Step 1. Clarify Requirements and Specs</span><div align=\"left\" style=\"word-wrap: break-word;\">First things first, the ultimate goals should always be clear.</div><div align=\"left\" style=\"word-wrap: break-word;\">Pinterest is a highly scalable photo-sharing service:</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">features: user profile, upload photos, news feed, etc.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">scaling out: horizontal scalability and micro services.<br style=\"word-wrap: break-word;\"></li></ul><span style=\"word-wrap: break-word; font-weight: 700;\">1.2 Step 2. Sketch Out High Level Design</span><div align=\"left\" style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\">Do not dive into details before outlining the big picture.</span>&nbsp;Otherwise, going off too far towards a wrong direction would make it harder to even provide a roughly correct solution. We will regret wasting time on irrelevant details when we do not have time to finish the task.</div><div align=\"left\" style=\"word-wrap: break-word;\">OK, let us sketch out the following diagram without concerning too much about the implementation detail of these components.</div><div align=\"left\" style=\"word-wrap: break-word;\"><img id=\"aimg_l5f3z\" class=\"zoom\" file=\"http://puncsky.github.com/images/crack-the-system-design-interview/pinterest-arch-overview.png\" lazyloadthumb=\"1\" border=\"0\" alt=\"\" src=\"quiver-image-url/B59BA9BD127B1EC2F5004A5122D8E796.png\" lazyloaded=\"true\" _load=\"1\" width=\"500\" height=\"249\" style=\"word-wrap: break-word; cursor: pointer;\"></div><div align=\"left\" style=\"word-wrap: break-word;\">So far so good! To some extent, congrats, we have solved the problem!</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3 Step 3. Discuss individual components and how they interact in detail</span><div align=\"left\" style=\"word-wrap: break-word;\">When we truly understand a system, we should be able to identify what each component is and explain how they interact with one another. Take these components in the above diagram and specify each one by one. This could lead to more general discussions, such as the three common topics in Section 2, and to more specific domains, like how to&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://www.usenix.org/legacy/event/osdi10/tech/full_papers/Beaver.pdf\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">design the photo storage data layout</a></font>…</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3.1 Load Balancer</span><div align=\"left\" style=\"word-wrap: break-word;\">Generally speaking, load balancers fall into three categories:</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">DNS Round Robin (rarely used): clients get a randomly-ordered list of IP addresses.<br style=\"word-wrap: break-word;\"><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">pros: easy to implement and free</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">cons: hard to control and not responsive, since DNS cache needs time to expire<br style=\"word-wrap: break-word;\"></li></ul></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">L3/L4 Load Balancer: traffic is routed by IP address and port. L3 is network layer (IP). L4 is session layer (TCP).<br style=\"word-wrap: break-word;\"><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">pros: better granularity, simple, responsive<br style=\"word-wrap: break-word;\"></li></ul></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">L7 Load Balancer: traffic is routed by what is inside the HTTP protocol. L7 is application layer (HTTP).<br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">It is good enough to talk in this level of detail on this topic, but in case the interviewer wants more, we can suggest exact algorithms like round robin, weighted round robin, least loaded, least loaded with slow start, utilization limit, latency, cascade, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3.2 Reverse Proxy</span><div align=\"left\" style=\"word-wrap: break-word;\">Reverse proxy, like varnish, centralizes internal services and provides unified interfaces to the public. For example,&nbsp;<a href=\"http://www.example.com/index\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">www.example.com/index</a>&nbsp;and&nbsp;<a href=\"http://www.example.com/sports\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">www.example.com/sports</a>&nbsp;appear to come from the same domain, but in fact they are from different micro services behind the reverse proxy. Reverse proxy could also help with caching and load balancing.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3.3 (Frontend) Web Tier</span><div align=\"left\" style=\"word-wrap: break-word;\">This is where web pages are served, and usually combined with the service / backend tier in the very early stage of a web service.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Stateless</span><div align=\"left\" style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\">There are two major bottlenecks of the whole system – requests per second (rps) and bandwidth.</span>&nbsp;We could improve the situation by using more efficient tech stack, like frameworks with&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.puncsky.com/blog/2015/01/13/understanding-reactor-pattern-for-highly-scalable-i-o-bound-web-server/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">async and non-blocking reactor pattern</a></font>, and enhancing the hardware, like&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">scaling up (aka vertical scaling) or scaling out (aka horizontal scaling)</span>.</div><div align=\"left\" style=\"word-wrap: break-word;\">Internet companies prefer scaling out, since it is more cost-efficient with a huge number of commodity machines. This is also good for recruiting, because the target skillsets are equipped by. After all, people rarely play with super computers or mainframes at home.</div><div align=\"left\" style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\">Frontend web tier and service tier must be stateless in order to add or remove hosts conveniently, thus achieving horizontal scalability.</span>&nbsp;As for feature switch or configs, there could be a database table / standalone service to keep those states.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Web Application and API</span><div align=\"left\" style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\">MVC(MVT) or MVVC</span>&nbsp;pattern is the dominant pattern for this layer. Traditionally, view or template is rendered to HTML by the server at runtime. In the age of mobile computing, view can be as simple as serving the minimal package of data transporting to the mobile devices, which is called&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">web API</span>. People believe that the API can be shared by clients and browsers. And that is why&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">single page web applications</span>&nbsp;are becoming more and more popular, especially with the assistance of frontend frameworks like react.js, angular.js, backbone.js, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3.4 App Service Tier</span><div align=\"left\" style=\"word-wrap: break-word;\"><span style=\"word-wrap: break-word; font-weight: 700;\">The single responsibility principle</span>&nbsp;advocates small and autonomous services that work together, so that each service can do one thing well and not block others. Small teams with small services can plan much more aggressively for the sake of hyper-growth.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Service Discovery</span><div align=\"left\" style=\"word-wrap: break-word;\">How do those services find each other?&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Zookeeper</a></font>&nbsp;is a popular and centralized choice. Instances with name, address, port, etc. are registered into the path in ZooKeeper for each service. If one service does not know where to find another service, it can query Zookeeper for the location and memorize it until that location is unavailable.</div><div align=\"left\" style=\"word-wrap: break-word;\">Zookeeper is a CP system in terms of CAP theorem (See Section 2.3 for more discussion), which means it stays consistent in the case of failures, but the leader of the centralized consensus will be unavailable for registering new services.</div><div align=\"left\" style=\"word-wrap: break-word;\">In contrast to Zookeeper, Uber is doing interesting work in a decentralized way, named&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://github.com/uber/hyperbahn\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">hyperbahn</a></font>, based on&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://github.com/uber/ringpop-node\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Ringpop consisten hash ring</a></font>. Read&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Amazon’s Dynamo</a></font>&nbsp;to understand AP and eventual consistency.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Micro Services</span><div align=\"left\" style=\"word-wrap: break-word;\">For the Pinterest case, these micro services could be user profile, follower, feed, search, spam, etc. Any of those topics could lead to an in-depth discussion. Useful links are listed in Section 3: Future Studies, to help us deal with them.</div><div align=\"left\" style=\"word-wrap: break-word;\">However, for a general interview question like “design Pinterest”, it is good enough to leave those services as black boxes.. If we want to show more passion, elaborate with some sample endpoints / APIs for those services would be great.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.3.5 Data Tier</span><div align=\"left\" style=\"word-wrap: break-word;\">Although a relational database can do almost all the storage work, please remember&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">do not save a blob, like a photo, into a relational database, and choose the right database for the right service.</span>&nbsp;For example, read performance is important for follower service, therefore it makes sense to use a key-value cache. Feeds are generated as time passes by, so HBase / Cassandra’s timestamp index is a great fit for this use case. Users have relationships with other users or objects, so a relational database is our choice by default in an user profile service.</div><div align=\"left\" style=\"word-wrap: break-word;\">Data and storage is a rather wide topic, and we will discuss it later in Section 2.2 Storage.</div><span style=\"word-wrap: break-word; font-weight: 700;\">1.4 (<a href=\"http://tinyurl.com/mwuwuhv\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">opt</a>ional) Step 4. Back-of-the-envelope Calculation</span><div align=\"left\" style=\"word-wrap: break-word;\">The final step, estimating how many machines are required, is optional, because time is probably up after all the discussions above and three common topics below. In case we run into this topic, we’d better prepare for it as well. It is a little tricky… we need come up with some variables and a function first, and then make some guesses for the values of those variables, and finally calculate the result.</div><div align=\"left\" style=\"word-wrap: break-word;\">The cost is a function of CPU, RAM, storage, bandwidth, number and size of the images uploaded each day.</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">N</i>&nbsp;users 10<font style=\"word-wrap: break-word; font-size: 10.5px;\">10</font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">i</i>&nbsp;images / (user * day) 10</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">s</i>&nbsp;size in bytes / image 10<font style=\"word-wrap: break-word; font-size: 10.5px;\">6</font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">viewed&nbsp;<i style=\"word-wrap: break-word;\">v</i>&nbsp;times / image 100</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">d</i>&nbsp;days</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">h</i>&nbsp;requests / sec 10<font style=\"word-wrap: break-word; font-size: 10.5px;\">4</font>&nbsp;(bottleneck)</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><i style=\"word-wrap: break-word;\">b</i>&nbsp;bandwidth (bottleneck)</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Server cost: $1000 / server</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Storage cost: $0.1 / GB</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Storage = Nisd<br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">Remember the two bottlenecks we mentioned in section 1.3.3 Web Tier? – requests per second (rps) and bandwidth. So the final expression would be</div><div align=\"left\" style=\"word-wrap: break-word;\"><i style=\"word-wrap: break-word;\">Number of required servers = max(Niv/h, Nivs/b)</i></div><span style=\"word-wrap: break-word; font-weight: 700;\">2 Three Common Topics</span><div align=\"left\" style=\"word-wrap: break-word;\">There are three common topics that could be applied to almost every system design question. They are extracted and summarized in this section.</div><span style=\"word-wrap: break-word; font-weight: 700;\">2.1 Communication</span><div align=\"left\" style=\"word-wrap: break-word;\">How do different components interact with each other? – communication protocols.</div><div align=\"left\" style=\"word-wrap: break-word;\">Here is a simple comparison of those protocols.</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">UDP and TCP are both transport layer protocols. TCP is reliable and connection-based. UDP is connectionless and unreliable.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">HTTP is in the application layer and normally TCP based, since HTTP assumes a reliable transport.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">RPC, an application layer protocol, is an inter-process communication that allows a computer program to cause a subroutine or procedure to execute in another address space (commonly on another computer on a shared network), without the programmer explicitly coding the details for this remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. In an Object-Oriented Programming context, RPC is also called remote invocation or remote method invocation (RMI).<br style=\"word-wrap: break-word;\"></li></ul><span style=\"word-wrap: break-word; font-weight: 700;\">Further discussions</span><div align=\"left\" style=\"word-wrap: break-word;\">Since RPC is super useful, some interviewers may ask how RPC works. The following picture is a brief answer.</div><div align=\"left\" style=\"word-wrap: break-word;\"><img id=\"aimg_Nfpjq\" class=\"zoom\" file=\"http://puncsky.github.com/images/crack-the-system-design-interview/rpc.png\" lazyloadthumb=\"1\" border=\"0\" alt=\"\" src=\"quiver-image-url/306387021B0DA38230466C5BA0B5B994.png\" lazyloaded=\"true\" _load=\"1\" width=\"500\" height=\"192\" style=\"word-wrap: break-word; cursor: pointer;\"></div><div align=\"left\" style=\"word-wrap: break-word;\">*Stub procedure: a local procedure that marshals the procedure identifier and the arguments into a request message, and then to send via its communication module to the server. When the reply message arrives, it unmarshals the results.</div><div align=\"left\" style=\"word-wrap: break-word;\">We do not have to implement our own RPC protocols. There are off-the-shelf frameworks.</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Google Protobuf: an open source RPC with only APIs but no RPC implementations. Smaller serialized data and slightly faster. Better documentations and cleaner APIs.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Facebook Thrift: supports more languages, richer data structures: list, set, map, etc. that Protobuf does not support) Incomplete documentation and hard to find good examples.<br style=\"word-wrap: break-word;\"><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">User case: Hbase/Cassandra/Hypertable/Scrib/..<br style=\"word-wrap: break-word;\"></li></ul></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Apache Avro: Avro is heavily used in the hadoop ecosystem and based on dynamic schemas in Json. It features dynamic typing, untagged data, and no manually-assigned field IDs.<br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">Generally speaking, RPC is internally used by many tech companies for performance issues, but it is rather hard to debug and not flexible. So for public APIs, we tend to use HTTP APIs, and are usually following the RESTful style.</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">REST (Representational state transfer of resources)<br style=\"word-wrap: break-word;\"><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Best practice of HTTP API to interact with resources.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">URL only decides the location. Headers (Accept and Content-Type, etc.) decide the representation. HTTP methods(GET/POST/PUT/DELETE) decide the state transfer.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">minimize the coupling between client and server (a huge number of HTTP infras on various clients, data-marshalling).</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">stateless and scaling out.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">service partitioning feasible.</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">used for public API.<br style=\"word-wrap: break-word;\"></li></ul></li></ul><span style=\"word-wrap: break-word; font-weight: 700;\">2.2 Storage</span><span style=\"word-wrap: break-word; font-weight: 700;\">2.2.1 Relational Database</span><div align=\"left\" style=\"word-wrap: break-word;\">Relational database is the default choice for most use cases, by reason of ACID (atomicity, consistency, isolation, and durability). One tricky thing is&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">consistency – it means that any transaction will bring database from one valid state to another, (different from the consistency in CAP</span>, which will be discussed in Section 2.3).</div><span style=\"word-wrap: break-word; font-weight: 700;\">Schema Design and 3rd Normal Form (3NF)</span><div align=\"left\" style=\"word-wrap: break-word;\">To reduce redundancy and improve consistency, people follow 3NF when designing database schemas:</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">1NF: tabular, each row-column intersection contains only one value</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">2NF: only the primary key determines all the attributes</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">3NF: only the candidate keys determine all the attributes (and non-prime attributes do not depend on each other)<br style=\"word-wrap: break-word;\"></li></ul><span style=\"word-wrap: break-word; font-weight: 700;\">Db Proxy</span><div align=\"left\" style=\"word-wrap: break-word;\">What if we want to eliminate single point of failure? What if the dataset is too large for one single machine to hold? For MySQL, the answer is to use a DB proxy to distribute data,&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://dba.stackexchange.com/questions/8889/mysql-sharding-vs-mysql-cluster\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">either by clustering or by sharding</a></font>.</div><div align=\"left\" style=\"word-wrap: break-word;\">Clustering is a decentralized solution. Everything is automatic. Data is distributed, moved, rebalanced automatically. Nodes gossip with each other, (though it may cause group isolation).</div><div align=\"left\" style=\"word-wrap: break-word;\">Sharding is a centralized solution. If we get rid of properties of clustering that we don’t like, sharding is what we get. Data is distributed manually and does not move. Nodes are not aware of each other.</div><span style=\"word-wrap: break-word; font-weight: 700;\">2.2.2 NoSQL</span><div align=\"left\" style=\"word-wrap: break-word;\">In a regular Internet service, the read write ratio is about 100:1 to 1000:1. However, when reading from a hard disk, a database join operation is time consuming, and 99% of the time is spent on disk seek. Not to mention a distributed join operation across networks.</div><div align=\"left\" style=\"word-wrap: break-word;\">To optimize the read performance,&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">denormalization</span>&nbsp;is introduced by adding redundant data or by grouping data. These four categories of NoSQL are here to help.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Key-value Store</span><div align=\"left\" style=\"word-wrap: break-word;\">The abstraction of a KV store is a giant hashtable/hashmap/dictionary.</div><div align=\"left\" style=\"word-wrap: break-word;\">The main reason we want to use a key-value cache is to reduce latency for accessing active data. Achieve an O(1) read/write performance on a fast and expensive media (like memory or SSD), instead of a traditional O(logn) read/write on a slow and cheap media (typically hard drive).</div><div align=\"left\" style=\"word-wrap: break-word;\">There are three major factors to consider when we design the cache.</div><ul type=\"1\" class=\"litype_1\" style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: decimal;\">Pattern: How to cache? is it read-through/write-through/write-around/write-back/cache-aside?</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: decimal;\">Placement: Where to place the cache? client side/distinct layer/server side?</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: decimal;\">Replacement: When to expire/replace the data? LRU/LFU/ARC?<br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">Out-of-box choices: Redis/Memcache? Redis supports data persistence while memcache does not. Riak, Berkeley DB, HamsterDB, Amazon Dynamo, Project Voldemort, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Document Store</span><div align=\"left\" style=\"word-wrap: break-word;\">The abstraction of a document store is like a KV store, but documents, like XML, JSON, BSON, and so on, are stored in the value part of the pair.</div><div align=\"left\" style=\"word-wrap: break-word;\">The main reason we want to use a document store is for flexibility and performance. Flexibility is obtained by schemaless document, and performance is improved by breaking 3NF. Startup’s business requirements are changing from time to time. Flexible schema empowers them to move fast.</div><div align=\"left\" style=\"word-wrap: break-word;\">Out-of-box choices: MongoDB, CouchDB, Terrastore, OrientDB, RavenDB, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Column-oriented Store</span><div align=\"left\" style=\"word-wrap: break-word;\">The abstraction of a column-oriented store is like a giant nested map: ColumnFamily&lt;RowKey, Columns&lt;Name, Value, Timestamp&gt;&gt;.</div><div align=\"left\" style=\"word-wrap: break-word;\">The main reason we want to use a column-oriented store is that it is distributed, highly-available, and optimized for write.</div><div align=\"left\" style=\"word-wrap: break-word;\">Out-of-box choices: Cassandra, HBase, Hypertable, Amazon SimpleDB, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">Graph Database</span><div align=\"left\" style=\"word-wrap: break-word;\">As the name indicates, this database’s abstraction is a graph. It allows us to store entities and the relationships between them.</div><div align=\"left\" style=\"word-wrap: break-word;\">If we use a relational database to store the graph, adding/removing relationships may involve schema changes and data movement, which is not the case when using a graph database. On the other hand, when we create tables in a relational database for the graph, we model based on the traversal we want; if the traversal changes, the data will have to change.</div><div align=\"left\" style=\"word-wrap: break-word;\">Out-of-box choices: Neo4J, Infinitegraph, OrientDB, FlockDB, etc.</div><span style=\"word-wrap: break-word; font-weight: 700;\">2.3 CAP Theorem</span><div align=\"left\" style=\"word-wrap: break-word;\">When we design a distributed system,&nbsp;<span style=\"word-wrap: break-word; font-weight: 700;\">trading off among CAP (consistency, availability, and partition tolerance)</span>&nbsp;is almost the first thing we want to consider.</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Consistency: all nodes see the same data at the same time</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Availability: a guarantee that every request receives a response about whether it succeeded or failed</li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\">Partition tolerance: system continues to operate despite arbitrary message loss or failure of part of the system<br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">In a distributed context, the choice is between CP and AP. Unfortunately, CA is just a joke, because single point of failure is a red flag in the real distributed systems world.</div><div align=\"left\" style=\"word-wrap: break-word;\">To ensure consistency, there are some popular protocols to consider: 2PC, eventual consistency (vector clock + RWN), Paxos,&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">In-Sync Replica</a></font>, etc.</div><div align=\"left\" style=\"word-wrap: break-word;\">To ensure availability, we can add replicas for the data. As to components of the whole system, people usually do&nbsp;<font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://www.ibm.com/developerworks/community/blogs/RohitShetty/entry/high_availability_cold_warm_hot?lang=en\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">cold standby, warm standby, hot standby, and active-active</a></font>&nbsp;to handle the failover.</div><span style=\"word-wrap: break-word; font-weight: 700;\">3 Future Studies</span><div align=\"left\" style=\"word-wrap: break-word;\">Just as everything else, preparation and practice makes perfect. This article just provides limited resources for your reference. Please keep learning, and enjoy ;)</div><ul style=\"word-wrap: break-word; margin: 0px 0px 0px 14px; padding: 0px;\"><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://docs.google.com/document/d/1dNKjHICogW5f94MKoBr8wDA3TASbhP0nrcy4eKiuA8Q/edit?usp=sharing\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Tian’s notes on big data from a programmer’s perspective</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://www.linkedin.com/pulse/100-open-source-big-data-architecture-papers-anil-madan\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">100 open source big data architecture papers</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://github.com/checkcheckzz/system-design-interview\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">System design interview for IT companies</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.amazon.com/The-Practice-Cloud-System-Administration/dp/032194318X\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">The Practice of Cloud System Administration: Designing and Operating Large Distributed Systems, Volume 2</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.amazon.com/NoSQL-Distilled-Emerging-Polyglot-Persistence/dp/0321826620\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"http://www.amazon.com/MongoDB-Applied-Design-Patterns-Copeland/dp/1449340040\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">MongoDB Applied Design Patterns</a></font></li><li style=\"word-wrap: break-word; margin: 0px 0px 0px 2em; padding: 0px; list-style: disc;\"><font color=\"#088cc\" style=\"word-wrap: break-word;\"><a href=\"https://msdn.microsoft.com/en-us/library/dn568099.aspx\" target=\"_blank\" class=\"gj_safe_a\" style=\"word-wrap: break-word; color: rgb(73, 123, 137);\">Cloud Design Patterns: Prescriptive Architecture Guidance for Cloud Applications</a></font><br style=\"word-wrap: break-word;\"></li></ul><div align=\"left\" style=\"word-wrap: break-word;\">EOF</div></font></td></tr></tbody></table>"
    }
  ]
}