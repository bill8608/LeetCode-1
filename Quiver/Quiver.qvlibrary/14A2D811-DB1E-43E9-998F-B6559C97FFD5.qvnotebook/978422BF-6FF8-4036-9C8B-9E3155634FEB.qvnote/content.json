{
  "title": "Object-Oriented JavaScript",
  "cells": [
    {
      "type": "text",
      "data": "<span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">Object-oriented programming (OOP) is a programming paradigm that uses&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/abstraction\" class=\"glossaryLink\" title=\"abstraction: Abstraction in computer programming is a way to&nbsp;reduce complexity and allow efficient design and implementation in complex software systems. It hides the technical complexity of systems behind simpler&nbsp;APIs.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">abstraction</a><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">&nbsp;to create models based on the real world. OOP uses several techniques from previously established paradigms, including&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/modularity\" class=\"glossaryLink\" title=\"modularity: Modularity refers to the division of a software package into logical units. The advantage of a modular system is that it's easier to reason about parts of the software package independently.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">modularity</a><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">,</span><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/polymorphism\" class=\"glossaryLink\" title=\"polymorphism: Polymorphism is the presentation of one interface for multiple data types.\n For example, integers, floats, and doubles are implicitly polymorphic: regardless of their different types, they can all be added, subtracted, multiplied, and so on.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">polymorphism</a><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">, and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/encapsulation\" class=\"glossaryLink\" title=\"encapsulation: Encapsulation is the packing of data and functions into one&nbsp;component (for example, a class) and then controlling access to that&nbsp;component to make a &quot;blackbox&quot; out of the object.&nbsp;Because of this, a user of that class only needs to know its interface (that is, the data and functions exposed&nbsp;outside&nbsp;the class), not the hidden implementation.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help; font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\">encapsulation</a>"
    },
    {
      "type": "text",
      "data": "<h2 id=\"Terminology\" style=\"margin: 0px 0px 12px; padding: 0px; border: 0px; word-wrap: break-word; font-family: 'Open Sans', Arial, sans-serif; line-height: 1; font-size: 2.143rem; letter-spacing: -1px; color: rgb(77, 78, 83); widows: 1; background-color: rgb(255, 255, 255);\">Terminology</h2><dl style=\"margin: 0px 0px 20px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px; line-height: 21px; widows: 1; background-color: rgb(255, 255, 255);\"><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Namespace\" class=\"glossaryLink\" title=\"Namespace: Namespace is a context for identifiers, a logical grouping of names used in a program. Within the same context and same scope,&nbsp; an identifier must uniquely identify an entity.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Namespace</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">A container which lets&nbsp;developers bundle all functionality under a unique, application-specific name.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Class\" class=\"glossaryLink\" title=\"Class: In object-oriented programming, a class defines an object's&nbsp;characteristics. Class&nbsp;is a template definition of an object's properties and methods, the &quot;blueprint&quot; from which other more specific instances of the object are drawn.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Class</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">Defines the object's characteristics. A class&nbsp;is a template definition of an object's&nbsp;properties and methods.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Object\" class=\"glossaryLink\" title=\"Object: Object refers to a data structure containing data and instructions for working with the data. Objects sometimes refer to real-world things, for example a car or map object in a racing game. JavaScript, Java, C++,&nbsp;Python, and Ruby are examples of object-oriented programming languages.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Object</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">An instance of a class.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Property\" class=\"glossaryLink\" title=\"Property: The term property can have several meanings depending on the context. It may refer to:\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Property</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">An object characteristic, such as color.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Method\" class=\"glossaryLink\" title=\"Method: A method is a function which is a property of an object. It exist two kind of methods: Instance Method which are built-in tasks performed by an object instance, or Static Methods which are tasks that can be performed without the need of an object instance.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Method</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">An object capability, such as walk. It is a subroutine or function associated with a class.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Constructor\" class=\"glossaryLink\" title=\"Constructor: A constructor belongs to a particular class object that is instantiated. The constructor initializes this&nbsp;object and can provide access to its private information. The concept of a constructor can be applied to most object-oriented programming languages. Essentially, a constructor in JavaScript is usually declared at the instance of a class.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Constructor</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">A method called at the moment an object is instantiated. It usually has the same name as the class containing it.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Inheritance\" class=\"glossaryLink\" title=\"Inheritance: Inheritance is a major feature of object-oriented programming.&nbsp; Data abstraction can be carried up several levels, that is, classes can have superclasses and subclasses.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Inheritance</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">A class can inherit characteristics from another class.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Encapsulation\" class=\"glossaryLink\" title=\"Encapsulation: Encapsulation is the packing of data and functions into one&nbsp;component (for example, a class) and then controlling access to that&nbsp;component to make a &quot;blackbox&quot; out of the object.&nbsp;Because of this, a user of that class only needs to know its interface (that is, the data and functions exposed&nbsp;outside&nbsp;the class), not the hidden implementation.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Encapsulation</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">A method of bundling the data and methods that use the data.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Abstraction\" class=\"glossaryLink\" title=\"Abstraction: Abstraction in computer programming is a way to&nbsp;reduce complexity and allow efficient design and implementation in complex software systems. It hides the technical complexity of systems behind simpler&nbsp;APIs.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Abstraction</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">The conjunction of an object's complex inheritance, methods, and properties&nbsp;must adequately&nbsp;reflect&nbsp;a reality model.</dd><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Polymorphism\" class=\"glossaryLink\" title=\"Polymorphism: Polymorphism is the presentation of one interface for multiple data types.\n For example, integers, floats, and doubles are implicitly polymorphic: regardless of their different types, they can all be added, subtracted, multiplied, and so on.\" style=\"margin: 0px; padding: 0px; border-width: 0px 0px 1px; border-bottom-style: dashed; border-bottom-color: rgb(170, 170, 170); text-decoration: none; cursor: help;\">Polymorphism</a></dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">Poly means \"<em style=\"margin: 0px; padding: 0px; border: 0px;\">many</em>\" and morphism means \"<em style=\"margin: 0px; padding: 0px; border: 0px;\">forms</em>\". Different classes might define the same method or property</dd></dl>"
    }
  ]
}