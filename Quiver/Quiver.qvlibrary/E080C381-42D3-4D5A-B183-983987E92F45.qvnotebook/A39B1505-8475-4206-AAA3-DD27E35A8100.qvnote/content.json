{
  "title": "Deck Of Card",
  "cells": [
    {
      "type": "text",
      "data": "重难点:<div>1. What is enum?</div><div><a href=\"http://tutorials.jenkov.com/java/enums.html\">http://tutorials.jenkov.com/java/enums.html</a><br></div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class DeckOfCards {\n\n\tpublic enum Suit {\n\t\tClub(0), Diamond(1), Heart(2), Spade(3);\n\t\tprivate int value;\n\n\t\tprivate Suit(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tpublic int getValue() {\n\t\t\treturn value;\n\t\t}\n\n\t\tpublic static Suit getSuitFromValue(int value) {\n\n\t\t}\n\t}\n\n\tpublic class Deck<T extends Card> {\n\t\tprivate ArrayList<T> cards;\n\t\tprivate int dealtIndex = 0;\n\n\t\tpublic void setDeckOfCards(ArrayList<T> deckOfCards) {\n\t\t}\n\n\t\tpublic void shuffle() {\n\t\t}\n\n\t\tpublic int remainingCards() {\n\t\t\treturn cards.size() - dealtIndex;\n\t\t}\n\n\t\tpublic T[] dealHand(int number) {\n\n\t\t}\n\n\t\tpublic T dealCard() {\n\n\t\t}\n\t}\n\n\tpublic abstract class Card {\n\t\tprivate boolean available = true;\n\t\t/*\n\t\t * number or face that's on card - a number 2 through 10, or 11 for\n\t\t * Jack, 12 for Queen, 13 for King, or 1 for Ace\n\t\t */\n\t\tprotected int faceValue;\n\t\tprotected Suit suit;\n\n\t\tpublic Card(int c, Suit s) {\n\t\t\tfaceValue = c;\n\t\t\tsuit = s;\n\t\t}\n\n\t\tpublic abstract int value();\n\n\t\tpublic Suit suit() {\n\t\t\treturn suit;\n\t\t}\n\n\t\t/*\n\t\t * Checks if the card is available to be given out to someone\n\t\t */\n\t\tpublic boolean isAvailable() {\n\t\t\treturn available;\n\t\t}\n\n\t\tpublic void markUnavailable() {\n\t\t\tavailable = false;\n\t\t}\n\n\t\tpublic void markAvailable() {\n\t\t\tavailable = true;\n\t\t}\n\t}\n\n\tpublic class Hand<T extends Card> {\n\t\tprotected ArrayList<T> cards = new ArrayList<T>();\n\n\t\tpublic int score() {\n\t\t\tint score = 0;\n\t\t\tfor (T card : cards) {\n\t\t\t\tscore += card.value();\n\t\t\t}\n\t\t\treturn score;\n\t\t}\n\n\t\tpublic void addCard(T card) {\n\t\t\tcards.add(card);\n\t\t}\n\t}\n\n\tpublic class BlackJackHand extends Hand<BlackJackCard> {\n\t\t/*\n\t\t * There are multiple possible scores for a blackjack hand, since aces\n\t\t * have multiple values. Return the highest possible score that's under\n\t\t * 21, or the lowest score that's over.\n\t\t */\n\t\tpublic int score() {\n\t\t\tArrayList<Integer> scores = possibleScores();\n\t\t\tint maxUnder = Integer.MIN_VALUE;\n\t\t\tint minOver = Integer.MAX_VALUE;\n\t\t\tfor (int score : scores) {\n\t\t\t\tif (score > 21 && score < minOver) {\n\t\t\t\t\tminOver = score;\n\t\t\t\t} else if (score <= 21 && score > maxUnder) {\n\t\t\t\t\tmaxUnder = score;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxUnder == Integer.MIN_VALUE ? minOver : maxUnder;\n\t\t}\n\n\t\t/*\n\t\t * return a list of all possible scores this hand could have (evaluating\n\t\t * each acr as both 1 and 11\n\t\t */\n\t\tprivate ArrayList<Integer> possibleScores() {\n\n\t\t}\n\n\t\tpublic boolean busted() {\n\t\t\treturn score() > 21;\n\t\t}\n\n\t\tpublic boolean is21() {\n\t\t\treturn score() == 21;\n\t\t}\n\n\t\tpublic boolean isBlackJack() {\n\n\t\t}\n\n\t}\n\n\tpublic class BlackJackCard extends Card {\n\t\tpublic BlackJackCard(int c, Suit s) {\n\t\t\tsuper(c, s);\n\t\t}\n\n\t\tpublic int value() {\n\t\t\tif (isAce()) {\n\t\t\t\treturn 1;\n\t\t\t} else if (faceValue >= 11 && faceValue <= 13) {\n\t\t\t\treturn 10;\n\t\t\t} else {\n\t\t\t\treturn faceValue;\n\t\t\t}\n\t\t}\n\n\t\tpublic int minValue() {\n\t\t\tif (isAce()) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn value();\n\t\t\t}\n\t\t}\n\n\t\tpublic int maxValue() {\n\t\t\tif (isAce()) {\n\t\t\t\treturn 11;\n\t\t\t} else {\n\t\t\t\treturn value();\n\t\t\t}\n\t\t}\n\n\t\tpublic boolean isAce() {\n\t\t\treturn faceValue == 1;\n\t\t}\n\n\t\tpublic boolean isFaceCard() {\n\t\t\treturn faceValue >= 11 && faceValue <= 13;\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t// TODO Auto-generated method stub\n\n\t}\n\n}\n\n  \n\n"
    },
    {
      "type": "text",
      "data": "<div><br></div><div><img src=\"quiver-image-url/54357250BA9955478C0069E51E66DD9C.gif\" alt=\"DeckOfCards.gif\"><br></div>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "diagram",
      "diagramType": "sequence",
      "data": ""
    }
  ]
}