{
  "title": "PromiseÂ ",
  "cells": [
    {
      "type": "text",
      "data": "<div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">A&nbsp;</span><code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word; color: rgb(77, 78, 83); font-size: 13px;\"><strong style=\"margin: 0px; padding: 0px; border: 0px;\">Promise</strong></code><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">&nbsp;represents a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers to an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a&nbsp;</span><em style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px;\">promise</em><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">&nbsp;of having a value at some point in the future.</span><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\"><br></span></div><div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\"><br></span></div><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">The&nbsp;</span><strong style=\"margin: 0px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px;\"><code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-style: inherit; font-weight: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word;\">Promise</code></strong><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">&nbsp;object is used for deferred and asynchronous computations. A&nbsp;</span><code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word; color: rgb(77, 78, 83); font-size: 13px;\">Promise</code><span style=\"color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px; background-color: rgb(255, 255, 255);\">&nbsp;represents an operation that hasn't completed yet, but is expected in the future.</span><div><p style=\"margin: 0px 0px 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px;\">A&nbsp;<code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-style: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word;\">Promise</code>&nbsp;is in one of these&nbsp;states:</p><ul style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 40px; border: 0px; list-style-position: initial; list-style-image: initial; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px;\"><li style=\"margin: 0px 0px 6px; padding: 0px; border: 0px;\"><em style=\"margin: 0px; padding: 0px; border: 0px;\">pending</em>: initial state, not fulfilled or rejected.</li><li style=\"margin: 0px 0px 6px; padding: 0px; border: 0px;\"><em style=\"margin: 0px; padding: 0px; border: 0px;\">fulfilled</em>: successful operation</li><li style=\"margin: 0px 0px 6px; padding: 0px; border: 0px;\"><em style=\"margin: 0px; padding: 0px; border: 0px;\">rejected</em>: failed operation.</li><li style=\"margin: 0px 0px 6px; padding: 0px; border: 0px;\"><em style=\"margin: 0px; padding: 0px; border: 0px;\">settled</em>:&nbsp;the Promise is either fulfilled or rejected, but not pending.</li></ul><p style=\"margin: 0px 0px 24px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 14px;\"><img src=\"quiver-image-url/835119A5C72DB92A1AE89730A7AF1251.png\" alt=\"\" style=\"margin: 0px; padding: 0px; border: 0px; width: 801px; height: auto !important;\"></p></div>"
    },
    {
      "type": "text",
      "data": "<h2 id=\"Syntax\" style=\"margin: 0px 0px 12px; padding: 0px; border: 0px; word-wrap: break-word; -webkit-hyphens: auto; font-family: 'Open Sans', Arial, sans-serif; line-height: 1; font-size: 2.143rem; letter-spacing: -1px; color: rgb(77, 78, 83);\">Syntax</h2><pre class=\"syntaxbox\" style=\"margin-bottom: 20px; padding: 15px; border-width: 0px 0px 0px 5px; border-left-style: solid; border-left-color: rgb(85, 138, 187); font-size: 1rem; line-height: 19px; background-color: rgb(221, 228, 233); color: rgb(77, 78, 83); overflow: auto; font-family: Consolas, Monaco, 'Andale Mono', monospace; tab-size: 4; -webkit-hyphens: none; white-space: pre-wrap;\">new Promise(<em style=\"margin: 0px; padding: 0px; border: 0px;\">executor</em>);\nnew Promise(function(resolve, reject) { ... });</pre>"
    },
    {
      "type": "text",
      "data": "<h3 id=\"Parameters\" style=\"margin: 0px 0px 12px; padding: 0px; border: 0px; word-wrap: break-word; -webkit-hyphens: auto; font-family: 'Open Sans', Arial, sans-serif; font-weight: 200; line-height: 1; font-size: 1.714rem; letter-spacing: -0.021em; color: rgb(77, 78, 83);\">Parameters</h3><dl style=\"margin: 0px 0px 20px; padding: 0px; border: 0px; color: rgb(77, 78, 83); font-family: 'Open Sans', Arial, sans-serif; font-size: 13px;\"><dt style=\"margin: 0px; padding: 0px; border: 0px; font-weight: 700;\">executor</dt><dd style=\"margin: 0px 0px 24px; padding: 0px 0px 0px 20px; border: 0px;\">Function object with two arguments&nbsp;<code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-style: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word;\">resolve</code>&nbsp;and&nbsp;<code style=\"padding-top: 0px; padding-bottom: 0px; border: 0px; font-style: inherit; font-family: Consolas, 'Liberation Mono', Courier, monospace; word-wrap: break-word;\">reject</code>. The first argument fulfills the promise, the second argument rejects it. We can call these functions&nbsp;once our operation is completed.</dd></dl>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "  function imgLoad(url) {\n    // Create new promise with the Promise() constructor;\n    // This has as its argument a function\n    // with two parameters, resolve and reject\n    return new Promise(function(resolve, reject) {\n      // Standard XHR to load an image\n      var request = new XMLHttpRequest();\n      request.open('GET', url);\n      request.responseType = 'blob';\n      // When the request loads, check whether it was successful\n      request.onload = function() {\n        if (request.status === 200) {\n        // If successful, resolve the promise by passing back the request response\n          resolve(request.response);\n        } else {\n        // If it fails, reject the promise with a error message\n          reject(Error('Image didn\\'t load successfully; error code:' + request.statusText));\n        }\n      };\n      request.onerror = function() {\n      // Also deal with the case when the entire request fails to begin with\n      // This is probably a network error, so reject the promise with an appropriate message\n          reject(Error('There was a network error.'));\n      };\n      // Send the request\n      request.send();\n    });\n  }\n  // Get a reference to the body element, and create a new image object\n  var body = document.querySelector('body');\n  var myImage = new Image();\n  // Call the function with the URL we want to load, but then chain the\n  // promise then() method on to the end of it. This contains two callbacks\n  imgLoad('myLittleVader.jpg').then(function(response) {\n    // The first runs when the promise resolves, with the request.reponse\n    // specified within the resolve() method.\n    var imageURL = window.URL.createObjectURL(response);\n    myImage.src = imageURL;\n    body.appendChild(myImage);\n    // The second runs when the promise\n    // is rejected, and logs the Error specified with the reject() method.\n  }, function(Error) {\n    console.log(Error);\n  });"
    },
    {
      "type": "text",
      "data": "<h2 id=\"Example_using_new_XMLHttpRequest()\" style=\"margin: 0px 0px 12px; padding: 0px; border: 0px; word-wrap: break-word; -webkit-hyphens: auto; font-family: 'Open Sans', Arial, sans-serif; line-height: 1; font-size: 2.143rem; letter-spacing: -1px; color: rgb(77, 78, 83);\">Example using new XMLHttpRequest()</h2><h3 id=\"Creating_a_Promise_2\" style=\"margin: 0px 0px 12px; padding: 0px; border: 0px; word-wrap: break-word; -webkit-hyphens: auto; font-family: 'Open Sans', Arial, sans-serif; font-weight: 200; line-height: 1; font-size: 1.714rem; letter-spacing: -0.021em; color: rgb(77, 78, 83);\">Creating a Promise</h3>"
    },
    {
      "type": "code",
      "language": "javascript",
      "data": "'use strict';\n\n// A-> $http function is implemented in order to follow the standard Adapter pattern\nfunction $http(url){\n \n  // A small example of object\n  var core = {\n\n    // Method that performs the ajax request\n    ajax : function (method, url, args) {\n\n      // Creating a promise\n      var promise = new Promise( function (resolve, reject) {\n\n        // Instantiates the XMLHttpRequest\n        var client = new XMLHttpRequest();\n        var uri = url;\n\n        if (args && (method === 'POST' || method === 'PUT')) {\n          uri += '?';\n          var argcount = 0;\n          for (var key in args) {\n            if (args.hasOwnProperty(key)) {\n              if (argcount++) {\n                uri += '&';\n              }\n              uri += encodeURIComponent(key) + '=' + encodeURIComponent(args[key]);\n            }\n          }\n        }\n\n        client.open(method, uri);\n        client.send();\n\n        client.onload = function () {\n          if (this.status >= 200 && this.status < 300) {\n            // Performs the function \"resolve\" when this.status is equal to 2xx\n            resolve(this.response);\n          } else {\n            // Performs the function \"reject\" when this.status is different than 2xx\n            reject(this.statusText);\n          }\n        };\n        client.onerror = function () {\n          reject(this.statusText);\n        };\n      });\n\n      // Return the promise\n      return promise;\n    }\n  };\n\n  // Adapter pattern\n  return {\n    'get' : function(args) {\n      return core.ajax('GET', url, args);\n    },\n    'post' : function(args) {\n      return core.ajax('POST', url, args);\n    },\n    'put' : function(args) {\n      return core.ajax('PUT', url, args);\n    },\n    'delete' : function(args) {\n      return core.ajax('DELETE', url, args);\n    }\n  };\n};\n// End A\n\n// B-> Here you define its functions and its payload\nvar mdnAPI = 'https://developer.mozilla.org/en-US/search.json';\nvar payload = {\n  'topic' : 'js',\n  'q'     : 'Promise'\n};\n\nvar callback = {\n  success : function(data){\n     console.log(1, 'success', JSON.parse(data));\n  },\n  error : function(data){\n     console.log(2, 'error', JSON.parse(data));\n  }\n};\n// End B\n\n// Executes the method call \n$http(mdnAPI) \n  .get(payload) \n  .then(callback.success) \n  .catch(callback.error);\n\n// Executes the method call but an alternative way (1) to handle Promise Reject case \n$http(mdnAPI) \n  .get(payload) \n  .then(callback.success, callback.error);\n"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}