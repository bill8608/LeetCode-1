{
  "title": "Comparable VS Comparator",
  "cells": [
    {
      "type": "text",
      "data": "<div><h2>1.Comparable</h2>Comparable is implemented by a class in order to be able to comparing object of itself with some other objects. The class itself must implement the interface in order to be able to compare its instance(s). The method required for implementation is compareTo(). Here is an example:</div><div><br></div>\n"
    },
    {
      "type": "code",
      "language": "java",
      "data": "class HDTV implements Comparable<HDTV> {\r  private int size;\r  private String brand;\r  public HDTV(int size, String brand) {\r    this.size = size;\r    this.brand = brand;\r}\r  public int getSize() {\r    return size;\r}\r  public void setSize(int size) {\r    this.size = size;\r}\r  public String getBrand() {\r    return brand;\r}\r  public void setBrand(String brand) {\r    this.brand = brand;\r}\r  @Override\r  public int compareTo(HDTV tv) {\r if (this.getSize() > tv.getSize())\r       return 1;\r    else if (this.getSize() < tv.getSize())\r       return -1;\r    else\r       return 0;\r} }\rpublic class Main {\r  public static void main(String[] args) {\r    HDTV tv1 = new HDTV(55, \"Samsung\");\r    HDTV tv2 = new HDTV(60, \"Sony\");\r    if (tv1.compareTo(tv2) > 0) {\r       System.out.println(tv1.getBrand() + \" is better.\");\r    } else {\r       System.out.println(tv2.getBrand() + \" is better.\");\r} }\r}\rSony is better."
    },
    {
      "type": "text",
      "data": "<div><h2>1.Comparator</h2><div>In some situations, you may not want to change a class and make it comparable. In such cases, Comparator can be used if you want to compare objects based on certain attributes/fields. For example, 2 persons can be compared based on ‘height‘ or ‘age‘ etc. (this can not be done using comparable.)<br>The method required to implement is compare(). Now let’s use another way to com- pare those TV by size. One common use of Comparator is sorting. Both Collections and Arrays classes provide a sort method which use a Comparator.</div></div>\n\n"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import java.util.ArrayList;\rimport java.util.Collections;\rimport java.util.Comparator;\rclass HDTV {\r  private int size;\r  private String brand;\r  public HDTV(int size, String brand) {\r    this.size = size;\r    this.brand = brand;\r}\r    public int getSize() {\r    return size;\r}\r  public void setSize(int size) {\r    this.size = size;\r}\r  public String getBrand() {\r    return brand;\r}\r  public void setBrand(String brand) {\r    this.brand = brand;\r} }\rclass SizeComparator implements Comparator<HDTV> {\r  @Override\r  public int compare(HDTV tv1, HDTV tv2) {\r    int tv1Size = tv1.getSize();\r    int tv2Size = tv2.getSize();\r    if (tv1Size > tv2Size) {\r       return 1;\r    } else if (tv1Size < tv2Size) {\r       return -1;\r    } else {\r       return 0;\r} }\r}\rpublic class Main {\r  public static void main(String[] args) {\r    HDTV tv1 = new HDTV(55, \"Samsung\");\r    HDTV tv2 = new HDTV(60, \"Sony\");\r    HDTV tv3 = new HDTV(42, \"Panasonic\");\r    ArrayList<HDTV> al = new ArrayList<HDTV>();\r    al.add(tv1);\r    al.add(tv2);\r    al.add(tv3);\r    Collections.sort(al, new SizeComparator());\r    for (HDTV a : al) {\r       System.out.println(a.getBrand());\r    }\r} }\rOutput:\rPanasonic\rSamsung\rSony"
    }
  ]
}