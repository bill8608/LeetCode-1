{
  "title": "Unit Test",
  "cells": [
    {
      "type": "text",
      "data": "<a href=\"http://tutorials.jenkov.com/java-unit-testing/index.html\">http://tutorials.jenkov.com/java-unit-testing/index.html</a>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class MyUnit {\n\n    public String concatenate(String one, String two){\n        return one + two;\n    }\n}"
    },
    {
      "type": "text",
      "data": "<h2 style=\"margin-top: 30px; color: rgb(51, 51, 51); font-family: Helvetica;\">The Unit Test</h2><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">To test this class I need a unit test that test each of its public methods. The class only has one public method,&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">concatenate()</code>, so all I need to test is this method.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">Unit tests are implemented as classes with test methods. Each test method usually tests a single method of the target class. Sometimes, a test method can test more than one method in the target class, and sometimes, if the method to test is big, you split the test into multiple test methods.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">Here is the JUnit unit test that test that the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">concatenate()</code>&nbsp;method:</p><div><br></div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class MyUnitTest {\n\n    @Test\n    public void testConcatenate() {\n        MyUnit myUnit = new MyUnit();\n\n        String result = myUnit.concatenate(\"one\", \"two\");\n\n        assertEquals(\"onetwo\", result);\n\n    }\n}"
    },
    {
      "type": "text",
      "data": "<p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">he unit test class is an ordinary class, with one method,&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">testConcatenate()</code>. Notice how this method is annotated with the JUnit annotation&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">@Test</code>. This is done to signal to the unit test runner, that this is method represents a unit test, that should be executed. Methods that are not annotated with&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">@Test</code>&nbsp;are not executed by the test runner.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">Inside the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">testConcatenate()</code>&nbsp;method an instance of&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">MyUnit</code>&nbsp;is created. Then it's&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">concatenate()</code>&nbsp;method is called with two string values.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">Finally, the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">assertEquals()</code>&nbsp;method is called. It is this method that does the actual testing. In this method we compare the output of the called method (<code style=\"font-family: Courier; font-size: 1em;\">concatenate()</code>) with the expected output. In other words, we compare \"onetwo\" (expected output) with the value returned by the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">concatenate()</code>&nbsp;method, which is kept in the variable&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">result</code>.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">If the two values are equal, nothing happens. The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">assertEquals()</code>&nbsp;method returns normally. If the two values are not equal, an exception is thrown, and the test method stops executing here.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">assertEquals()</code>&nbsp;method is a statically imported method, which normally resides in the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">org.junit.Assert</code>&nbsp;class. Notice the static import of this class at the top of&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">MyUnitTest</code>. Using the static import of the method is shorter than writing&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">Assert.assertEquals()</code>.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">You can have as many test methods in a unit test class as you want. The test runners will find them all, and execute each of them. I just sufficed with one test method in this example, to keep it clear.</p>"
    }
  ]
}