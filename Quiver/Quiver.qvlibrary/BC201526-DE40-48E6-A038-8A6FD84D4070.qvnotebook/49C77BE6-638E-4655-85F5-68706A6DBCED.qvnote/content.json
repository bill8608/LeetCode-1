{
  "title": "Java Fields",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"margin-top: 30px; color: rgb(51, 51, 51); font-family: Helvetica;\">Java Field Access Modifiers</h2><div><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The Java field access modifier determines whether the field can be accessed by classes other than the the class owning the field. There are four possible access modifiers for Java fields:</p><ul style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\"><li>private</li><li>package</li><li>protected</li><li>public</li></ul><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\"><i><b>private</b></i></code>&nbsp;access modifier means that only code inside the class itself can access this Java field.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\"><b><i>package</i></b></code>&nbsp;access modifier means that only code inside the class itself, or other classes in the same package, can access the field. You don't actually write the package modifier. By leaving out any access modifier, the access modifier <b>defaults</b> to package scope.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\"><b><i>protected</i></b></code>&nbsp;access modifier is like the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\"><b>package</b></code>&nbsp;modifier, except subclasses of the class can also access the field, even if the subclass is not located in the same package.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The&nbsp;<code style=\"font-family: Courier; font-size: 1em;\"><b><i>public</i></b></code>&nbsp;access modifier means that the field can be accessed by all classes in your application.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">Here are a few examples of fields declared with access modifiers. The modifiers are in bold.</p></div>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Customer {\n    private   String email;\n              String position;   //no modifier = package access modifier\n    protected String name;\n    public    String city;\n\n}"
    },
    {
      "type": "text",
      "data": "<p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The above use of Java field access modifiers are for the sake of this example only. You would probably not use all access modifiers in the same class. Most often you use&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">private</code>&nbsp;and&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">protected</code>. For simple, data carrying classes you may declare all fields&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">public</code>.</p><p style=\"color: rgb(51, 51, 51); font-family: Helvetica; font-size: 16px;\">The Java access modifiers are covered in more detail in my&nbsp;<a href=\"http://tutorials.jenkov.com/java/access-modifiers.html\" style=\"color: rgb(85, 26, 139); text-decoration: none; font-weight: 700;\">Java access modifiers tutorial</a>.</p>"
    },
    {
      "type": "text",
      "data": "<h2 style=\"margin-top: 30px; font-family: Helvetica;\">Static and Non-static Fields</h2><div><p style=\"font-family: Helvetica; font-size: 16px;\">A Java field can be static or non-static.</p><p style=\"font-family: Helvetica; font-size: 16px;\">A static field belongs to the class. Thus, no matter how many objects you create of that class, there will only exist one field located in the class, and the value of that field is the same, no matter from which object it is accessed. Here is a diagram illustrating static fields:</p><p style=\"font-family: Helvetica; font-size: 16px;\"><img src=\"quiver-image-url/8430D877714B1C1B1CC157E42A1C7BE9.jpg\"><br></p><p style=\"font-family: Helvetica; font-size: 16px;\"><b>Static Java fields are located in the class, not in the instances of the class.</b><br></p></div><div><span style=\"font-family: Helvetica; font-size: 16px;\">Non-static Java fields, on the other hand, are located in the instances of the class. Each instance of the class can have its own values for these fields. Here is a diagram illustrating non-static fields:</span><b><br></b></div><div><img src=\"quiver-image-url/A8ABB7901C4A63AA1AA86BB5A0EC156E.jpg\"><span style=\"font-family: Helvetica; font-size: 16px;\"><br></span></div>"
    },
    {
      "type": "text",
      "data": "<h2 style=\"margin-top: 30px; font-family: Helvetica;\">Final Fields</h2><p style=\"font-family: Helvetica; font-size: 16px;\">A Java field can be declared&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">final</code>. A&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">final</code>&nbsp;field cannot have its value changed, once assigned. You declare a field to be&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">final</code>&nbsp;by adding the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">final</code>&nbsp;keyword to the field declaration. Here is an example:</p>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Customer {\n    final String field1 = \"Fixed Value\";\n}"
    },
    {
      "type": "text",
      "data": "<p style=\"font-family: Helvetica; font-size: 16px;\">The value of the&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">field1</code>&nbsp;field cannot be changed now. That means, that even if the field belongs to objects (class instances), you cannot vary the value of the field from object to object.</p><p style=\"font-family: Helvetica; font-size: 16px;\">When you cannot change the value of a final field anyways, in many cases it makes sense to also declare it&nbsp;<code style=\"font-family: Courier; font-size: 1em;\">static</code>. That way it only exists in the class, not in every object too. Here is an example:</p>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Customer {\n\n    static final String field1 = \"Fixed Value\";\n\n}"
    },
    {
      "type": "text",
      "data": "<span style=\"font-family: Helvetica; font-size: 16px;\">Since&nbsp;</span><code style=\"font-family: Courier; font-size: 16px;\">static final</code><span style=\"font-family: Helvetica; font-size: 16px;\">&nbsp;fields are often used as constants, the naming convention is to write the field name in all uppercase, and to separate the words with underscore _ . Here is a Java&nbsp;</span><code style=\"font-family: Courier; font-size: 16px;\">static</code><span style=\"font-family: Helvetica; font-size: 16px;\">&nbsp;</span><code style=\"font-family: Courier; font-size: 16px;\">final</code><span style=\"font-family: Helvetica; font-size: 16px;\">&nbsp;field example:</span>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "public class Customer {\n\n    static final String CONSTANT_1 = \"Fixed Value\";\n\n}"
    }
  ]
}